package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.codec.datatypes.Event;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TestCRUD extends Contract {
    public static final String[] BINARY_ARRAY = {"","6040513d601f19601f82011682018060405250610d1b919081019061182b565b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc315735811281604051610d4c9190611bc4565b60405180910390a1809350505050919050565b6060806060600080600060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e1c9190611bdf565b602060405180830381600087803b158015610e3657600080fd5b505af1158015610e4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e6e9190810190611802565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ed457600080fd5b505af1158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f0c9190810190611787565b96508673ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18d6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f639190611c21565b600060405180830381600087803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff16634f49f01c886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fea9190611b65565b602060405180830381600087803b15801561100457600080fd5b505af1158015611018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061103c91908101906117b0565b95508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110a257600080fd5b505af11580156110b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110da919081019061182b565b60405190808252806020026020018201604052801561110d57816020015b60608152602001906001900390816110f85790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561117457600080fd5b505af1158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111ac919081019061182b565b6040519080825280602002602001820160405280156111df57816020015b60608152602001906001900390816111ca5790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561124657600080fd5b505af115801561125a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061127e919081019061182b565b6040519080825280602002602001820160405280156112b157816020015b606081526020019060019003908161129c5790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561131d57600080fd5b505af1158015611331573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611355919081019061182b565b82121561165f578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113b19190611bc4565b602060405180830381600087803b1580156113cb57600080fd5b505af11580156113df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061140391908101906117d9565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161145890611c01565b600060405180830381600087803b15801561147257600080fd5b505af1158015611486573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506114af9190810190611895565b85838151811015156114bd57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161151d90611c56565b600060405180830381600087803b15801561153757600080fd5b505af115801561154b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506115749190810190611895565b848381518110151561158257fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115e290611cab565b600060405180830381600087803b1580156115fc57600080fd5b505af1158015611610573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506116399190810190611895565b838381518110151561164757fe5b906020019060200201819052508160010191506112b9565b8484849a509a509a5050505050505050509193909250565b60006116838251611dbe565b905092915050565b60006116978251611dd0565b905092915050565b60006116ab8251611de2565b905092915050565b60006116bf8251611df4565b905092915050565b60006116d38251611e06565b905092915050565b600082601f83011215156116ee57600080fd5b81356117016116fc82611d2d565b611d00565b9150808252602083016020830185838301111561171d57600080fd5b611728838284611e34565b50505092915050565b600082601f830112151561174457600080fd5b815161175761175282611d2d565b611d00565b9150808252602083016020830185838301111561177357600080fd5b61177e838284611e43565b50505092915050565b60006020828403121561179957600080fd5b60006117a784828501611677565b91505092915050565b6000602082840312156117c257600080fd5b60006117d08482850161168b565b91505092915050565b6000602082840312156117eb57600080fd5b60006117f98482850161169f565b91505092915050565b60006020828403121561181457600080fd5b6000611822848285016116b3565b91505092915050565b60006020828403121561183d57600080fd5b600061184b848285016116c7565b91505092915050565b60006020828403121561186657600080fd5b600082013567ffffffffffffffff81111561188057600080fd5b61188c848285016116db565b91505092915050565b6000602082840312156118a757600080fd5b600082015167ffffffffffffffff8111156118c157600080fd5b6118cd84828501611731565b91505092915050565b6000806000606084860312156118eb57600080fd5b600084013567ffffffffffffffff81111561190557600080fd5b611911868287016116db565b935050602084013567ffffffffffffffff81111561192e57600080fd5b61193a868287016116db565b925050604084013567ffffffffffffffff81111561195757600080fd5b611963868287016116db565b9150509250925092565b600061197882611d66565b8084526020840193508360208202850161199185611d59565b60005b848110156119ca5783830388526119ac838351611a3e565b92506119b782611d87565b9150602088019750600181019050611994565b508196508694505050505092915050565b6119e481611e10565b82525050565b6119f381611e22565b82525050565b611a0281611db4565b82525050565b6000611a1382611d7c565b808452611a27816020860160208601611e43565b611a3081611e76565b602085010191505092915050565b6000611a4982611d71565b808452611a5d816020860160208601611e43565b611a6681611e76565b602085010191505092915050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f61676500000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f74656c00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611b33818661196d565b90508181036020830152611b47818561196d565b90508181036040830152611b5b818461196d565b9050949350505050565b6000602082019050611b7a60008301846119db565b92915050565b6000602082019050611b9560008301846119ea565b92915050565b6000604082019050611bb060008301856119ea565b611bbd60208301846119db565b9392505050565b6000602082019050611bd960008301846119f9565b92915050565b60006020820190508181036000830152611bf98184611a3e565b905092915050565b60006020820190508181036000830152611c1a81611a74565b9050919050565b60006040820190508181036000830152611c3a81611a74565b90508181036020830152611c4e8184611a08565b905092915050565b60006020820190508181036000830152611c6f81611aab565b9050919050565b60006040820190508181036000830152611c8f81611aab565b90508181036020830152611ca38184611a08565b905092915050565b60006020820190508181036000830152611cc481611ae2565b9050919050565b60006040820190508181036000830152611ce481611ae2565b90508181036020830152611cf88184611a08565b905092","915050565b6000604051905081810181811067ffffffffffffffff82111715611d2357600080fd5b8060405250919050565b600067ffffffffffffffff821115611d4457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611dc982611d94565b9050919050565b6000611ddb82611d94565b9050919050565b6000611ded82611d94565b9050919050565b6000611dff82611d94565b9050919050565b6000819050919050565b6000611e1b82611d94565b9050919050565b6000611e2d82611d94565b9050919050565b82818337600083830152505050565b60005b83811015611e61578082015181840152602081019050611e46565b83811115611e70576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058208a79499723a9913e160efc15a2bd03fca5ae33ff532488a489a053ec3ddb438c6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","ffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d4090611c01565b600060405180830381600087803b158015610d5a57600080fd5b505af1158015610d6e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610d979190810190611895565b8483815181101515610da557fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e0590611c56565b600060405180830381600087803b158015610e1f57600080fd5b505af1158015610e33573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610e5c9190810190611895565b8383815181101515610e6a57fe5b90602001906020020181905250816001019150610adc565b8484849a509a509a5050505050505050509193909250565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f4b9190611bdf565b602060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f9d9190810190611802565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561100357600080fd5b505af1158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061103b9190810190611787565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110929190611ccb565b600060405180830381600087803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166315e51df6836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111199190611b65565b602060405180830381600087803b15801561113357600080fd5b505af1158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061116b919081019061182b565b90507fe7769b56c2afa8e40381956f76b91d9ec19c34c0a81791702fdcae68e35a72718160405161119c9190611bc4565b60405180910390a1809350505050919050565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112629190611bdf565b602060405180830381600087803b15801561127c57600080fd5b505af1158015611290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112b49190810190611802565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561131a57600080fd5b505af115801561132e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061135291908101906117d9565b92508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113a99190611c21565b600060405180830381600087803b1580156113c357600080fd5b505af11580156113d7573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114309190611c76565b600060405180830381600087803b15801561144a57600080fd5b505af115801561145e573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156114c657600080fd5b505af11580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114fe9190810190611787565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115559190611ccb565b600060405180830381600087803b15801561156f57600080fd5b505af1158015611583573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16639bdc3fb084846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115de929190611b9b565b602060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611630919081019061182b565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a816040516116619190611bc4565b60405180910390a1809450505050509392505050565b60006116838251611dbe565b905092915050565b60006116978251611dd0565b905092915050565b60006116ab8251611de2565b905092915050565b60006116bf8251611df4565b905092915050565b60006116d38251611e06565b905092915050565b600082601f83011215156116ee57600080fd5b81356117016116fc82611d2d565b611d00565b9150808252602083016020830185838301111561171d57600080fd5b611728838284611e34565b50505092915050565b600082601f830112151561174457600080fd5b815161175761175282611d2d565b611d00565b9150808252602083016020830185838301111561177357600080fd5b61177e838284611e43565b50505092915050565b60006020828403121561179957600080fd5b60006117a784828501611677565b91505092915050565b6000602082840312156117c257600080fd5b60006117d08482850161168b565b91505092915050565b6000602082840312156117eb57600080fd5b60006117f98482850161169f565b91505092915050565b60006020828403121561181457600080fd5b6000611822848285016116b3565b91505092915050565b60006020828403121561183d57600080fd5b600061184b848285016116c7565b91505092915050565b60006020828403121561186657600080fd5b600082013567ffffffffffffffff81111561188057600080fd5b61188c848285016116db565b91505092915050565b6000602082840312156118a757600080fd5b600082015167ffffffffffffffff8111156118c157600080fd5b6118cd84828501611731565b91505092915050565b6000806000606084860312156118eb57600080fd5b600084013567ffffffffffffffff81111561190557600080fd5b611911868287016116db565b935050602084013567ffffffffffffffff81111561192e57600080fd5b61193a868287016116db565b925050604084013567ffffffffffffffff81111561195757600080fd5b611963868287016116db565b9150509250925092565b600061197882611d66565b8084526020840193508360208202850161199185611d59565b60005b848110156119ca5783830388526119ac838351611a3e565b92506119b782611d87565b9150602088019750600181019050611994565b508196508694505050505092915050565b6119e481611e10565b82525050565b6119f381611e22565b82525050565b611a0281611db4565b82525050565b6000611a1382611d7c565b808452611a27816020860160208601611e43565b611a3081611e76565b602085010191505092915050565b6000611a4982611d71565b808452611a5d816020860160208601611e43565b611a6681611e76565b602085010191505092915050565b6000600382527f61676500000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f74656c00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611b33818661196d565b90508181036020830152611b47818561196d565b90508181036040830152611b5b818461196d565b9050949350505050565b6000602082019050611b7a60008301846119db565b92915050565b6000602082019050611b9560008301846119ea565b92915050565b6000604082019050611bb060008301856119ea565b611bbd60208301846119db565b9392505050565b6000602082019050611bd960008301846119f9565b92915050565b60006020820190508181036000830152611bf98184611a3e565b905092915050565b60006020820190508181036000830152611c1a81611a74565b9050919050565b60006040820190508181036000830152611c3a81611a74565b90508181036020830152611c4e8184611a08565b905092915050565b60006020820190508181036000830152611c6f81611aab565b9050919050565b60006040820190508181036000830152611c8f81611aab565b90508181036020830152611ca38184611a08565b905092915050565b60006020820190508181036000830152611cc481611ae2565b9050919050565b60006040820190508181036000830152611ce481611ae2565b90508181036020830152611cf88184611a08565b905092","915050565b6000604051905081810181811067ffffffffffffffff82111715611d2357600080fd5b8060405250919050565b600067ffffffffffffffff821115611d4457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611dc982611d94565b9050919050565b6000611ddb82611d94565b9050919050565b6000611ded82611d94565b9050919050565b6000611dff82611d94565b9050919050565b6000819050919050565b6000611e1b82611d94565b9050919050565b6000611e2d82611d94565b9050919050565b82818337600083830152505050565b60005b83811015611e61578082015181840152602081019050611e46565b83811115611e70576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820d4fd21c74b33a20ff21b973e8575dbabb18008457c29c36ac58479d92d3db22e6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"string\"},{\"name\":\"tel\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"string\"},{\"name\":\"tel\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected TestCRUD(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public TransactionReceipt insert(String name, String age, String tel) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(String name, String age, String tel, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String name, String age, String tel) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update(String name, String age, String tel) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(String name, String age, String tel, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String name, String age, String tel) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<List<String>, List<String>, List<String>> select(String name) throws
            ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<String>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public List<CreateResultEventResponse> getCreateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<InsertResultEventResponse> getInsertResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TestCRUD load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TestCRUD(contractAddress, client, credential);
    }

    public static TestCRUD deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(TestCRUD.class, client, credential, getBinary(client.getCryptoSuite()), null, null, null);
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}

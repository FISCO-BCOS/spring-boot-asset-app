package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TestCRUD extends Contract {
    public static final String[] BINARY_ARRAY = {"","10610cd757fe5b602002602001015160200151828281518110610cef57fe5b6020026020010181905250806001019050610c4b565b505b828282995099509950505050505050509193909250565b604051806040016040528060608152602001606081525090565b6040518060200160405280606081525090565b6040518060600160405280606081526020016060815260200160006005811115610d7157fe5b81525090565b6040518060200160405280606081525090565b600082601f830112610d9b57600080fd5b8151610dae610da9826115a5565b611578565b9150818183526020840193506020810190508360005b83811015610df45781518601610dda8882610f2f565b845260208401935060208301925050600181019050610dc4565b5050505092915050565b600082601f830112610e0f57600080fd5b8151610e22610e1d826115cd565b611578565b9150818183526020840193506020810190508360005b83811015610e685781518601610e4e8882610f7f565b845260208401935060208301925050600181019050610e38565b5050505092915050565b600081519050610e8181611788565b92915050565b600082601f830112610e9857600080fd5b8135610eab610ea6826115f5565b611578565b91508082526020830160208301858383011115610ec757600080fd5b610ed2838284611728565b50505092915050565b600082601f830112610eec57600080fd5b8151610eff610efa826115f5565b611578565b91508082526020830160208301858383011115610f1b57600080fd5b610f26838284611737565b50505092915050565b600060208284031215610f4157600080fd5b610f4b6020611578565b9050600082015167ffffffffffffffff811115610f6757600080fd5b610f7384828501610dfe565b60008301525092915050565b600060408284031215610f9157600080fd5b610f9b6040611578565b9050600082015167ffffffffffffffff811115610fb757600080fd5b610fc384828501610edb565b600083015250602082015167ffffffffffffffff811115610fe357600080fd5b610fef84828501610edb565b60208301525092915050565b60006020828403121561100d57600080fd5b600082015167ffffffffffffffff81111561102757600080fd5b61103384828501610d8a565b91505092915050565b60006020828403121561104e57600080fd5b600061105c84828501610e72565b91505092915050565b60006020828403121561107757600080fd5b600082013567ffffffffffffffff81111561109157600080fd5b61109d84828501610e87565b91505092915050565b6000806000606084860312156110bb57600080fd5b600084013567ffffffffffffffff8111156110d557600080fd5b6110e186828701610e87565b935050602084013567ffffffffffffffff8111156110fe57600080fd5b61110a86828701610e87565b925050604084013567ffffffffffffffff81111561112757600080fd5b61113386828701610e87565b9150509250925092565b600061114983836112f6565b905092915050565b600061115d8383611368565b905092915050565b60006111718383611413565b905092915050565b600061118482611651565b61118e81856116a4565b9350836020820285016111a085611621565b8060005b858110156111dc57848403895281516111bd858261113d565b94506111c88361167d565b925060208a019950506001810190506111a4565b50829750879550505050505092915050565b60006111f98261165c565b61120381856116b5565b93508360208202850161121585611631565b8060005b8581101561125157848403895281516112328582611151565b945061123d8361168a565b925060208a01995050600181019050611219565b50829750879550505050505092915050565b600061126e82611667565b61127881856116c6565b93508360208202850161128a85611641565b8060005b858110156112c657848403895281516112a78582611165565b94506112b283611697565b925060208a0199505060018101905061128e565b50829750879550505050505092915050565b6112e181611716565b82525050565b6112f08161170c565b82525050565b600061130182611672565b61130b81856116d7565b935061131b818560208601611737565b6113248161176a565b840191505092915050565b600061133a82611672565b61134481856116e8565b9350611354818560208601611737565b61135d8161176a565b840191505092915050565b6000606083016000830151848203600086015261138582826112f6565b9150506020830151848203602086015261139f82826112f6565b91505060408301516113b460408601826112d8565b508091505092915050565b600060208301600083015184820360008601526113dc82826111ee565b9150508091505092915050565b600060208301600083015184820360008601526114068282611263565b9150508091505092915050565b6000604083016000830151848203600086015261143082826112f6565b9150506020830151848203602086015261144a82826112f6565b9150508091505092915050565b600060608201905081810360008301526114718186611179565b905081810360208301526114858185611179565b905081810360408301526114998184611179565b9050949350505050565b60006020820190506114b860008301846112e7565b92915050565b600060408201905081810360008301526114d8818561132f565b905081810360208301526114ec81846113bf565b90509392505050565b6000604082019050818103600083015261150f818561132f565b9050818103602083015261152381846113e9565b90509392505050565b60006060820190508181036000830152611546818661132f565b9050818103602083015261155a81856113e9565b9050818103604083015261156e81846113bf565b9050949350505050565b6000604051905081810181811067ffffffffffffffff8211171561159b57600080fd5b8060405250919050565b600067ffffffffffffffff8211156115bc57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156115e457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561160c57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008190506117078261177b565b919050565b6000819050919050565b6000611721826116f9565b9050919050565b82818337600083830152505050565b60005b8381101561175557808201518184015260208101905061173a565b83811115611764576000848401525b50505050565b6000601f19601f8301169050919050565b6006811061178557fe5b50565b6117918161170c565b811461179c57600080fd5b5056fea2646970667358221220fa798f60857f8d810027c6a74fd05bcb02cf214bb3a2d446ec74d635ad4731a664736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","3c565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a81604051610d0491906114a3565b60405180910390a180985050505050505050509392505050565b604051806040016040528060608152602001606081525090565b6040518060200160405280606081525090565b6040518060600160405280606081526020016060815260200160006005811115610d7157fe5b81525090565b6040518060200160405280606081525090565b600082601f830112610d9b57600080fd5b8151610dae610da9826115a5565b611578565b9150818183526020840193506020810190508360005b83811015610df45781518601610dda8882610f2f565b845260208401935060208301925050600181019050610dc4565b5050505092915050565b600082601f830112610e0f57600080fd5b8151610e22610e1d826115cd565b611578565b9150818183526020840193506020810190508360005b83811015610e685781518601610e4e8882610f7f565b845260208401935060208301925050600181019050610e38565b5050505092915050565b600081519050610e8181611788565b92915050565b600082601f830112610e9857600080fd5b8135610eab610ea6826115f5565b611578565b91508082526020830160208301858383011115610ec757600080fd5b610ed2838284611728565b50505092915050565b600082601f830112610eec57600080fd5b8151610eff610efa826115f5565b611578565b91508082526020830160208301858383011115610f1b57600080fd5b610f26838284611737565b50505092915050565b600060208284031215610f4157600080fd5b610f4b6020611578565b9050600082015167ffffffffffffffff811115610f6757600080fd5b610f7384828501610dfe565b60008301525092915050565b600060408284031215610f9157600080fd5b610f9b6040611578565b9050600082015167ffffffffffffffff811115610fb757600080fd5b610fc384828501610edb565b600083015250602082015167ffffffffffffffff811115610fe357600080fd5b610fef84828501610edb565b60208301525092915050565b60006020828403121561100d57600080fd5b600082015167ffffffffffffffff81111561102757600080fd5b61103384828501610d8a565b91505092915050565b60006020828403121561104e57600080fd5b600061105c84828501610e72565b91505092915050565b60006020828403121561107757600080fd5b600082013567ffffffffffffffff81111561109157600080fd5b61109d84828501610e87565b91505092915050565b6000806000606084860312156110bb57600080fd5b600084013567ffffffffffffffff8111156110d557600080fd5b6110e186828701610e87565b935050602084013567ffffffffffffffff8111156110fe57600080fd5b61110a86828701610e87565b925050604084013567ffffffffffffffff81111561112757600080fd5b61113386828701610e87565b9150509250925092565b600061114983836112f6565b905092915050565b600061115d8383611368565b905092915050565b60006111718383611413565b905092915050565b600061118482611651565b61118e81856116a4565b9350836020820285016111a085611621565b8060005b858110156111dc57848403895281516111bd858261113d565b94506111c88361167d565b925060208a019950506001810190506111a4565b50829750879550505050505092915050565b60006111f98261165c565b61120381856116b5565b93508360208202850161121585611631565b8060005b8581101561125157848403895281516112328582611151565b945061123d8361168a565b925060208a01995050600181019050611219565b50829750879550505050505092915050565b600061126e82611667565b61127881856116c6565b93508360208202850161128a85611641565b8060005b858110156112c657848403895281516112a78582611165565b94506112b283611697565b925060208a0199505060018101905061128e565b50829750879550505050505092915050565b6112e181611716565b82525050565b6112f08161170c565b82525050565b600061130182611672565b61130b81856116d7565b935061131b818560208601611737565b6113248161176a565b840191505092915050565b600061133a82611672565b61134481856116e8565b9350611354818560208601611737565b61135d8161176a565b840191505092915050565b6000606083016000830151848203600086015261138582826112f6565b9150506020830151848203602086015261139f82826112f6565b91505060408301516113b460408601826112d8565b508091505092915050565b600060208301600083015184820360008601526113dc82826111ee565b9150508091505092915050565b600060208301600083015184820360008601526114068282611263565b9150508091505092915050565b6000604083016000830151848203600086015261143082826112f6565b9150506020830151848203602086015261144a82826112f6565b9150508091505092915050565b600060608201905081810360008301526114718186611179565b905081810360208301526114858185611179565b905081810360408301526114998184611179565b9050949350505050565b60006020820190506114b860008301846112e7565b92915050565b600060408201905081810360008301526114d8818561132f565b905081810360208301526114ec81846113bf565b90509392505050565b6000604082019050818103600083015261150f818561132f565b9050818103602083015261152381846113e9565b90509392505050565b60006060820190508181036000830152611546818661132f565b9050818103602083015261155a81856113e9565b9050818103604083015261156e81846113bf565b9050949350505050565b6000604051905081810181811067ffffffffffffffff8211171561159b57600080fd5b8060405250919050565b600067ffffffffffffffff8211156115bc57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156115e457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561160c57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008190506117078261177b565b919050565b6000819050919050565b6000611721826116f9565b9050919050565b82818337600083830152505050565b60005b8381101561175557808201518184015260208101905061173a565b83811115611764576000848401525b50505050565b6000601f19601f8301169050919050565b6006811061178557fe5b50565b6117918161170c565b811461179c57600080fd5b5056fea2646970667358221220ba180be04e3f0a51b6a73e8593cb90a80da2e8c4f6e00756e1b09b8f7bc72d0c64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"age\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tel\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"age\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tel\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_UPDATE = "update";

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected TestCRUD(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<InsertResultEventResponse> getInsertResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt insert(String name, String age, String tel) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(String name, String age, String tel, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String name, String age, String tel) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<List<String>, List<String>, List<String>> select(String name) throws
            ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<String>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt update(String name, String age, String tel) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(String name, String age, String tel, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String name, String age, String tel) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(age),
                new Utf8String(tel)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static TestCRUD load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TestCRUD(contractAddress, client, credential);
    }

    public static TestCRUD deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(TestCRUD.class, client, credential, getBinary(client.getCryptoSuite()), null, null, null);
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}

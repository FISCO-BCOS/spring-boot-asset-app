package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TestCRUDMultiParameter extends Contract {
    public static final String[] BINARY_ARRAY = {"","604051610a7d9190611620565b60405180910390a180945050505050919050565b6060806060610a9e610e6a565b60405180606001604052806040518060400160405280600481526020017f6e616d6500000000000000000000000000000000000000000000000000000000815250815260200186815260200160006005811115610af757fe5b81525090506060600167ffffffffffffffff81118015610b1657600080fd5b50604051908082528060200260200182016040528015610b5057816020015b610b3d610e6a565b815260200190600190039081610b355790505b5090508181600081518110610b6157fe5b6020026020010181905250610b74610e96565b81816000018190525060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345cfc70e6040518060400160405280600681526020017f706572736f6e0000000000000000000000000000000000000000000000000000815250846040518363ffffffff1660e01b8152600401610c1092919061163b565b60006040518083038186803b158015610c2857600080fd5b505afa158015610c3c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c6591906111cf565b90506060815167ffffffffffffffff81118015610c8157600080fd5b50604051908082528060200260200182016040528015610cb557816020015b6060815260200190600190039081610ca05790505b5090506060825167ffffffffffffffff81118015610cd257600080fd5b50604051908082528060200260200182016040528015610d0657816020015b6060815260200190600190039081610cf15790505b5090506060835167ffffffffffffffff81118015610d2357600080fd5b50604051908082528060200260200182016040528015610d5757816020015b6060815260200190600190039081610d425790505b509050600084511115610e265760008090505b8451811015610e24578b848281518110610d8057fe5b6020026020010181905250848181518110610d9757fe5b602002602001015160000151600081518110610daf57fe5b602002602001015160200151838281518110610dc757fe5b6020026020010181905250848181518110610dde57fe5b602002602001015160000151600181518110610df657fe5b602002602001015160200151828281518110610e0e57fe5b6020026020010181905250806001019050610d6a565b505b828282995099509950505050505050509193909250565b604051806040016040528060608152602001606081525090565b6040518060200160405280606081525090565b6040518060600160405280606081526020016060815260200160006005811115610e9057fe5b81525090565b6040518060200160405280606081525090565b600082601f830112610eba57600080fd5b8135610ecd610ec882611742565b611715565b9150818183526020840193506020810190508360005b83811015610f135781358601610ef9888261101a565b845260208401935060208301925050600181019050610ee3565b5050505092915050565b600082601f830112610f2e57600080fd5b8151610f41610f3c8261176a565b611715565b9150818183526020840193506020810190508360005b83811015610f875781518601610f6d88826110c2565b845260208401935060208301925050600181019050610f57565b5050505092915050565b600082601f830112610fa257600080fd5b8151610fb5610fb082611792565b611715565b9150818183526020840193506020810190508360005b83811015610ffb5781518601610fe18882611112565b845260208401935060208301925050600181019050610fcb565b5050505092915050565b6000815190506110148161194d565b92915050565b600082601f83011261102b57600080fd5b813561103e611039826117ba565b611715565b9150808252602083016020830185838301111561105a57600080fd5b6110658382846118ed565b50505092915050565b600082601f83011261107f57600080fd5b815161109261108d826117ba565b611715565b915080825260208301602083018583830111156110ae57600080fd5b6110b98382846118fc565b50505092915050565b6000602082840312156110d457600080fd5b6110de6020611715565b9050600082015167ffffffffffffffff8111156110fa57600080fd5b61110684828501610f91565b60008301525092915050565b60006040828403121561112457600080fd5b61112e6040611715565b9050600082015167ffffffffffffffff81111561114a57600080fd5b6111568482850161106e565b600083015250602082015167ffffffffffffffff81111561117657600080fd5b6111828482850161106e565b60208301525092915050565b6000602082840312156111a057600080fd5b600082013567ffffffffffffffff8111156111ba57600080fd5b6111c684828501610ea9565b91505092915050565b6000602082840312156111e157600080fd5b600082015167ffffffffffffffff8111156111fb57600080fd5b61120784828501610f1d565b91505092915050565b60006020828403121561122257600080fd5b600061123084828501611005565b91505092915050565b60006020828403121561124b57600080fd5b600082013567ffffffffffffffff81111561126557600080fd5b6112718482850161101a565b91505092915050565b60006112868383611433565b905092915050565b600061129a83836114e5565b905092915050565b60006112ae8383611590565b905092915050565b60006112c182611816565b6112cb8185611869565b9350836020820285016112dd856117e6565b8060005b8581101561131957848403895281516112fa858261127a565b945061130583611842565b925060208a019950506001810190506112e1565b50829750879550505050505092915050565b600061133682611821565b611340818561187a565b935083602082028501611352856117f6565b8060005b8581101561138e578484038952815161136f858261128e565b945061137a8361184f565b925060208a01995050600181019050611356565b50829750879550505050505092915050565b60006113ab8261182c565b6113b5818561188b565b9350836020820285016113c785611806565b8060005b8581101561140357848403895281516113e485826112a2565b94506113ef8361185c565b925060208a019950506001810190506113cb565b50829750879550505050505092915050565b61141e816118db565b82525050565b61142d816118d1565b82525050565b600061143e82611837565b611448818561189c565b93506114588185602086016118fc565b6114618161192f565b840191505092915050565b600061147782611837565b61148181856118ad565b93506114918185602086016118fc565b61149a8161192f565b840191505092915050565b60006114b26016836118ad565b91507f656e74697479206c656e677468206d69736d61746368000000000000000000006000830152602082019050919050565b600060608301600083015184820360008601526115028282611433565b9150506020830151848203602086015261151c8282611433565b91505060408301516115316040860182611415565b508091505092915050565b60006020830160008301518482036000860152611559828261132b565b9150508091505092915050565b6000602083016000830151848203600086015261158382826113a0565b9150508091505092915050565b600060408301600083015184820360008601526115ad8282611433565b915050602083015184820360208601526115c78282611433565b9150508091505092915050565b600060608201905081810360008301526115ee81866112b6565b9050818103602083015261160281856112b6565b9050818103604083015261161681846112b6565b9050949350505050565b60006020820190506116356000830184611424565b92915050565b60006040820190508181036000830152611655818561146c565b90508181036020830152611669818461153c565b90509392505050565b6000604082019050818103600083015261168c818561146c565b905081810360208301526116a08184611566565b90509392505050565b600060608201905081810360008301526116c3818661146c565b905081810360208301526116d78185611566565b905081810360408301526116eb818461153c565b9050949350505050565b6000602082019050818103600083015261170e816114a5565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561173857600080fd5b8060405250919050565b600067ffffffffffffffff82111561175957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561178157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156117a957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156117d157600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008190506118cc82611940565b919050565b6000819050919050565b60006118e6826118be565b9050919050565b82818337600083830152505050565b60005b8381101561191a5780820151818401526020810190506118ff565b83811115611929576000848401525b50505050565b6000601f19601f8301169050919050565b6006811061194a57fe5b50565b611956816118d1565b811461196157600080fd5b5056fea264697066735822122048a17b0adba2e4617f3cfe60049c592b661e20cbc42719c1ab476a877ece978864736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","0000000000000000000000000000000000000000000000000081525087856040518463ffffffff1660e01b8152600401610aac939291906116a9565b602060405180830381600087803b158015610ac657600080fd5b505af1158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe9190611210565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a81604051610b2f9190611620565b60405180910390a1809650505050505050919050565b60006003825114610b8b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610b82906116f5565b60405180910390fd5b6060600367ffffffffffffffff81118015610ba557600080fd5b50604051908082528060200260200182016040528015610bdf57816020015b610bcc610e7c565b815260200190600190039081610bc45790505b50905060008090505b600180549050811015610cfa57610bfd610e7c565b604051806040016040528060018481548110610c1557fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cb35780601f10610c8857610100808354040283529160200191610cb3565b820191906000526020600020905b815481529060010190602001808311610c9657829003601f168201915b50505050508152602001868481518110610cc957fe5b6020026020010151815250905080838381518110610ce357fe5b602002602001018190525050806001019050610be8565b50610d03610e96565b604051806020016040528083815250905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397390eed6040518060400160405280600681526020017f706572736f6e0000000000000000000000000000000000000000000000000000815250846040518363ffffffff1660e01b8152600401610da7929190611672565b602060405180830381600087803b158015610dc157600080fd5b505af1158015610dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df99190611210565b90507fdfc533ec2b52797a1229dc2495dbd3f4948f7c4c982ec077ad9d80810ec5c1f981604051610e2a9190611620565b60405180910390a1809350505050919050565b6040518060600160405280606081526020016060815260200160006005811115610e6357fe5b81525090565b6040518060200160405280606081525090565b604051806040016040528060608152602001606081525090565b6040518060200160405280606081525090565b600082601f830112610eba57600080fd5b8135610ecd610ec882611742565b611715565b9150818183526020840193506020810190508360005b83811015610f135781358601610ef9888261101a565b845260208401935060208301925050600181019050610ee3565b5050505092915050565b600082601f830112610f2e57600080fd5b8151610f41610f3c8261176a565b611715565b9150818183526020840193506020810190508360005b83811015610f875781518601610f6d88826110c2565b845260208401935060208301925050600181019050610f57565b5050505092915050565b600082601f830112610fa257600080fd5b8151610fb5610fb082611792565b611715565b9150818183526020840193506020810190508360005b83811015610ffb5781518601610fe18882611112565b845260208401935060208301925050600181019050610fcb565b5050505092915050565b6000815190506110148161194d565b92915050565b600082601f83011261102b57600080fd5b813561103e611039826117ba565b611715565b9150808252602083016020830185838301111561105a57600080fd5b6110658382846118ed565b50505092915050565b600082601f83011261107f57600080fd5b815161109261108d826117ba565b611715565b915080825260208301602083018583830111156110ae57600080fd5b6110b98382846118fc565b50505092915050565b6000602082840312156110d457600080fd5b6110de6020611715565b9050600082015167ffffffffffffffff8111156110fa57600080fd5b61110684828501610f91565b60008301525092915050565b60006040828403121561112457600080fd5b61112e6040611715565b9050600082015167ffffffffffffffff81111561114a57600080fd5b6111568482850161106e565b600083015250602082015167ffffffffffffffff81111561117657600080fd5b6111828482850161106e565b60208301525092915050565b6000602082840312156111a057600080fd5b600082013567ffffffffffffffff8111156111ba57600080fd5b6111c684828501610ea9565b91505092915050565b6000602082840312156111e157600080fd5b600082015167ffffffffffffffff8111156111fb57600080fd5b61120784828501610f1d565b91505092915050565b60006020828403121561122257600080fd5b600061123084828501611005565b91505092915050565b60006020828403121561124b57600080fd5b600082013567ffffffffffffffff81111561126557600080fd5b6112718482850161101a565b91505092915050565b60006112868383611433565b905092915050565b600061129a83836114e5565b905092915050565b60006112ae8383611590565b905092915050565b60006112c182611816565b6112cb8185611869565b9350836020820285016112dd856117e6565b8060005b8581101561131957848403895281516112fa858261127a565b945061130583611842565b925060208a019950506001810190506112e1565b50829750879550505050505092915050565b600061133682611821565b611340818561187a565b935083602082028501611352856117f6565b8060005b8581101561138e578484038952815161136f858261128e565b945061137a8361184f565b925060208a01995050600181019050611356565b50829750879550505050505092915050565b60006113ab8261182c565b6113b5818561188b565b9350836020820285016113c785611806565b8060005b8581101561140357848403895281516113e485826112a2565b94506113ef8361185c565b925060208a019950506001810190506113cb565b50829750879550505050505092915050565b61141e816118db565b82525050565b61142d816118d1565b82525050565b600061143e82611837565b611448818561189c565b93506114588185602086016118fc565b6114618161192f565b840191505092915050565b600061147782611837565b61148181856118ad565b93506114918185602086016118fc565b61149a8161192f565b840191505092915050565b60006114b26016836118ad565b91507f656e74697479206c656e677468206d69736d61746368000000000000000000006000830152602082019050919050565b600060608301600083015184820360008601526115028282611433565b9150506020830151848203602086015261151c8282611433565b91505060408301516115316040860182611415565b508091505092915050565b60006020830160008301518482036000860152611559828261132b565b9150508091505092915050565b6000602083016000830151848203600086015261158382826113a0565b9150508091505092915050565b600060408301600083015184820360008601526115ad8282611433565b915050602083015184820360208601526115c78282611433565b9150508091505092915050565b600060608201905081810360008301526115ee81866112b6565b9050818103602083015261160281856112b6565b9050818103604083015261161681846112b6565b9050949350505050565b60006020820190506116356000830184611424565b92915050565b60006040820190508181036000830152611655818561146c565b90508181036020830152611669818461153c565b90509392505050565b6000604082019050818103600083015261168c818561146c565b905081810360208301526116a08184611566565b90509392505050565b600060608201905081810360008301526116c3818661146c565b905081810360208301526116d78185611566565b905081810360408301526116eb818461153c565b9050949350505050565b6000602082019050818103600083015261170e816114a5565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561173857600080fd5b8060405250919050565b600067ffffffffffffffff82111561175957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561178157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156117a957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156117d157600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008190506118cc82611940565b919050565b6000819050919050565b60006118e6826118be565b9050919050565b82818337600083830152505050565b60005b8381101561191a5780820151818401526020810190506118ff565b83811115611929576000848401525b50505050565b6000601f19601f8301169050919050565b6006811061194a57fe5b50565b611956816118d1565b811461196157600080fd5b5056fea2646970667358221220d94b93fa500995037674a4f47a67d423c1b451c2b89b352f756ae0259d344f0064736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"entity\",\"type\":\"string[]\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"entity\",\"type\":\"string[]\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_UPDATE = "update";

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected TestCRUDMultiParameter(String contractAddress, Client client,
            CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<InsertResultEventResponse> getInsertResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt insert(List<String> entity) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(List<String> entity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(List<String> entity) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<List<String>, List<String>, List<String>> select(String name) throws
            ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<String>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt update(List<String> entity) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(List<String> entity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(List<String> entity) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static TestCRUDMultiParameter load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new TestCRUDMultiParameter(contractAddress, client, credential);
    }

    public static TestCRUDMultiParameter deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(TestCRUDMultiParameter.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    @Override
    public String toString() {
        return "TestCRUDMultiParameter{" +
                "contractAddress='" + contractAddress + '\'' +
                '}';
    }
}

package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.codec.datatypes.Event;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TestMultiParameterCRUD extends Contract {
    public static final String[] BINARY_ARRAY = {"", "", "a95760018114611ac957611b0a565b607f600283041680865260ff198316602087015260408601935050611b0a565b60028204808652602086019550611adf85611db0565b60005b82811015611b0157815481890152600182019150602081019050611ae2565b80880195505050505b505092915050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611b638186611985565b90508181036020830152611b778185611985565b90508181036040830152611b8b8184611985565b9050949350505050565b6000602082019050611baa60008301846119f3565b92915050565b6000602082019050611bc56000830184611a02565b92915050565b6000604082019050611be06000830185611a02565b611bed60208301846119f3565b9392505050565b6000602082019050611c096000830184611a11565b92915050565b60006020820190508181036000830152611c298184611a56565b905092915050565b60006020820190508181036000830152611c4b8184611a8c565b905092915050565b60006040820190508181036000830152611c6d8185611a8c565b90508181036020830152611c818184611a56565b90509392505050565b60006040820190508181036000830152611ca48185611a8c565b90508181036020830152611cb88184611a20565b90509392505050565b60006040820190508181036000830152611cda81611b12565b90508181036020830152611cee8184611a20565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611d1957600080fd5b8060405250919050565b600067ffffffffffffffff821115611d3a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611d6257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611d8e57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611e2582611df0565b9050919050565b6000611e3782611df0565b9050919050565b6000611e4982611df0565b9050919050565b6000611e5b82611df0565b9050919050565b6000819050919050565b6000611e7782611df0565b9050919050565b6000611e8982611df0565b9050919050565b82818337600083830152505050565b60005b83811015611ebd578082015181840152602081019050611ea2565b83811115611ecc576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058206667bc75511ae33ed8902780cccc87f27f61a133eeb6c9750eeff6aebb3246da6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"", "60200201819052508160010191506106b7565b8484849a509a509a5050505050505050509193909250565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b769190611c0f565b602060405180830381600087803b158015610b9057600080fd5b505af1158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bc891908101906118b1565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c669190810190611836565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db560016000815481101515610c9457fe5b90600052602060002001876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cd8929190611c8a565b600060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166315e51df6836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d5f9190611b95565b602060405180830381600087803b158015610d7957600080fd5b505af1158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610db191908101906118da565b90507fe7769b56c2afa8e40381956f76b91d9ec19c34c0a81791702fdcae68e35a727181604051610de29190611bf4565b60405180910390a1809350505050919050565b6000806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ea99190611c0f565b602060405180830381600087803b158015610ec357600080fd5b505af1158015610ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610efb91908101906118b1565b94508473ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f6157600080fd5b505af1158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f999190810190611888565b9350600192505b865183101561106c578373ffffffffffffffffffffffffffffffffffffffff16631a391cb4600185815481101515610fd457fe5b906000526020600020018986815181101515610fec57fe5b906020019060200201516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161102f929190611c53565b600060405180830381600087803b15801561104957600080fd5b505af115801561105d573d6000803e3d6000fd5b50505050826001019250610fa0565b8473ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110d057600080fd5b505af11580156110e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111089190810190611836565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db56001600081548110151561113657fe5b9060005260206000200189600081518110151561114f57fe5b906020019060200201516040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611192929190611c53565b600060405180830381600087803b1580156111ac57600080fd5b505af11580156111c0573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16639bdc3fb085846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161121b929190611bcb565b602060405180830381600087803b15801561123557600080fd5b505af1158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061126d91908101906118da565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a8160405161129e9190611bf4565b60405180910390a18095505050505050919050565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f706572736f6e00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113669190611c0f565b602060405180830381600087803b15801561138057600080fd5b505af1158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113b891908101906118b1565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561141e57600080fd5b505af1158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114569190810190611888565b9250600091505b60018054905082101561152d578273ffffffffffffffffffffffffffffffffffffffff16631a391cb460018481548110151561149557fe5b9060005260206000200188858151811015156114ad57fe5b906020019060200201516040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114f0929190611c53565b600060405180830381600087803b15801561150a57600080fd5b505af115801561151e573d6000803e3d6000fd5b5050505081600101915061145d565b8373ffffffffffffffffffffffffffffffffffffffff1663a0bf1a09846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115829190611bb0565b602060405180830381600087803b15801561159c57600080fd5b505af11580156115b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115d491908101906118da565b90507fdfc533ec2b52797a1229dc2495dbd3f4948f7c4c982ec077ad9d80810ec5c1f9816040516116059190611bf4565b60405180910390a180945050505050919050565b600082601f830112151561162c57600080fd5b813561163f61163a82611d23565b611cf6565b9150818183526020840193506020810190508360005b83811015611685578135860161166b88826116f3565b845260208401935060208301925050600181019050611655565b5050505092915050565b600061169b8251611e1a565b905092915050565b60006116af8251611e2c565b905092915050565b60006116c38251611e3e565b905092915050565b60006116d78251611e50565b905092915050565b60006116eb8251611e62565b905092915050565b600082601f830112151561170657600080fd5b813561171961171482611d4b565b611cf6565b9150808252602083016020830185838301111561173557600080fd5b611740838284611e90565b50505092915050565b600082601f830112151561175c57600080fd5b813561176f61176a82611d77565b611cf6565b9150808252602083016020830185838301111561178b57600080fd5b611796838284611e90565b50505092915050565b600082601f83011215156117b257600080fd5b81516117c56117c082611d77565b611cf6565b915080825260208301602083018583830111156117e157600080fd5b6117ec838284611e9f565b50505092915050565b60006020828403121561180757600080fd5b600082013567ffffffffffffffff81111561182157600080fd5b61182d84828501611619565b91505092915050565b60006020828403121561184857600080fd5b60006118568482850161168f565b91505092915050565b60006020828403121561187157600080fd5b600061187f848285016116a3565b91505092915050565b60006020828403121561189a57600080fd5b60006118a8848285016116b7565b91505092915050565b6000602082840312156118c357600080fd5b60006118d1848285016116cb565b91505092915050565b6000602082840312156118ec57600080fd5b60006118fa848285016116df565b91505092915050565b60006020828403121561191557600080fd5b600082013567ffffffffffffffff81111561192f57600080fd5b61193b84828501611749565b91505092915050565b60006020828403121561195657600080fd5b600082015167ffffffffffffffff81111561197057600080fd5b61197c8482850161179f565b91505092915050565b600061199082611dc2565b808452602084019350836020820285016119a985611da3565b60005b848110156119e25783830388526119c4838351611a56565b92506119cf82611de3565b91506020880197506001810190506119ac565b508196508694505050505092915050565b6119fc81611e6c565b82525050565b611a0b81611e7e565b82525050565b611a1a81611e10565b82525050565b6000611a2b82611dd8565b808452611a3f816020860160208601611e9f565b611a4881611ed2565b602085010191505092915050565b6000611a6182611dcd565b808452611a75816020860160208601611e9f565b611a7e81611ed2565b602085010191505092915050565b600081546001811660008114611a", "a95760018114611ac957611b0a565b607f600283041680865260ff198316602087015260408601935050611b0a565b60028204808652602086019550611adf85611db0565b60005b82811015611b0157815481890152600182019150602081019050611ae2565b80880195505050505b505092915050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611b638186611985565b90508181036020830152611b778185611985565b90508181036040830152611b8b8184611985565b9050949350505050565b6000602082019050611baa60008301846119f3565b92915050565b6000602082019050611bc56000830184611a02565b92915050565b6000604082019050611be06000830185611a02565b611bed60208301846119f3565b9392505050565b6000602082019050611c096000830184611a11565b92915050565b60006020820190508181036000830152611c298184611a56565b905092915050565b60006020820190508181036000830152611c4b8184611a8c565b905092915050565b60006040820190508181036000830152611c6d8185611a8c565b90508181036020830152611c818184611a56565b90509392505050565b60006040820190508181036000830152611ca48185611a8c565b90508181036020830152611cb88184611a20565b90509392505050565b60006040820190508181036000830152611cda81611b12565b90508181036020830152611cee8184611a20565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611d1957600080fd5b8060405250919050565b600067ffffffffffffffff821115611d3a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611d6257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611d8e57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611e2582611df0565b9050919050565b6000611e3782611df0565b9050919050565b6000611e4982611df0565b9050919050565b6000611e5b82611df0565b9050919050565b6000819050919050565b6000611e7782611df0565b9050919050565b6000611e8982611df0565b9050919050565b82818337600083830152505050565b60005b83811015611ebd578082015181840152602081019050611ea2565b83811115611ecc576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058205c2f81a2c705a5890a9470bd612ae4b71ffc4af7461fb7e7953ac2717af40dc26c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"entity\",\"type\":\"string[]\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"entity\",\"type\":\"string[]\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
            }));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
            }));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
            }));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
            }));
    ;

    protected TestMultiParameterCRUD(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public TransactionReceipt update(List<String> entity) {
        final Function function = new Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void update(List<String> entity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(List<String> entity) {
        final Function function = new Function(
                FUNC_UPDATE,
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
        );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt insert(List<String> entity) {
        final Function function = new Function(
                FUNC_INSERT,
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insert(List<String> entity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT,
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(List<String> entity) {
        final Function function = new Function(
                FUNC_INSERT,
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
        );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt remove(String name) {
        final Function function = new Function(
                FUNC_REMOVE,
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE,
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String name) {
        final Function function = new Function(
                FUNC_REMOVE,
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple3<List<String>, List<String>, List<String>> select(String name) throws
            ContractException {
        final Function function = new Function(FUNC_SELECT,
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {
                }, new TypeReference<DynamicArray<Utf8String>>() {
                }, new TypeReference<DynamicArray<Utf8String>>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<String>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public List<CreateResultEventResponse> getCreateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<InsertResultEventResponse> getInsertResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TestMultiParameterCRUD load(String contractAddress, Client client,
                                              CryptoKeyPair credential) {
        return new TestMultiParameterCRUD(contractAddress, client, credential);
    }

    public static TestMultiParameterCRUD deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(TestMultiParameterCRUD.class, client, credential, getBinary(client.getCryptoSuite()), null, null, null);
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}

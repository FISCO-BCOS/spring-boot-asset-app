package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.codec.datatypes.Event;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TestKVMultiParameter extends Contract {
    public static final String[] BINARY_ARRAY = {"","60006040830160008301518482036000860152610a8d8282610994565b91505060208301518482036020860152610aa78282610994565b9150508091505092915050565b6000602082019050610ac96000830184610985565b92915050565b60006040820190508181036000830152610ae981856109cd565b90508181036020830152610afd81846109cd565b90509392505050565b60006060820190508181036000830152610b2081866109cd565b90508181036020830152610b3481856109cd565b90508181036040830152610b4881846109cd565b9050949350505050565b60006060820190508181036000830152610b6c81866109cd565b90508181036020830152610b8081856109cd565b90508181036040830152610b948184610a46565b9050949350505050565b60006020820190508181036000830152610bb781610a06565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715610be157600080fd5b8060405250919050565b600067ffffffffffffffff821115610c0257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610c2a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610c5257600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610d10578082015181840152602081019050610cf5565b83811115610d1f576000848401525b50505050565b6000601f19601f8301169050919050565b610d3f81610ccd565b8114610d4a57600080fd5b50565b610d5681610cd9565b8114610d6157600080fd5b5056fea2646970667358221220f795c885e53c78f8a14992fdabab67ee668f8563ce83777165b8b1b0a7fc014664736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","60006040830160008301518482036000860152610a8d8282610994565b91505060208301518482036020860152610aa78282610994565b9150508091505092915050565b6000602082019050610ac96000830184610985565b92915050565b60006040820190508181036000830152610ae981856109cd565b90508181036020830152610afd81846109cd565b90509392505050565b60006060820190508181036000830152610b2081866109cd565b90508181036020830152610b3481856109cd565b90508181036040830152610b4881846109cd565b9050949350505050565b60006060820190508181036000830152610b6c81866109cd565b90508181036020830152610b8081856109cd565b90508181036040830152610b948184610a46565b9050949350505050565b60006020820190508181036000830152610bb781610a06565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715610be157600080fd5b8060405250919050565b600067ffffffffffffffff821115610c0257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610c2a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610c5257600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610d10578082015181840152602081019050610cf5565b83811115610d1f576000848401525b50505050565b6000601f19601f8301169050919050565b610d3f81610ccd565b8114610d4a57600080fd5b50565b610d5681610cd9565b8114610d6157600080fd5b5056fea2646970667358221220e247fe1a7ff98510961812ab66d78007d9b362db59de78d1c64145b67e9626bd64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"SetEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"entity\",\"type\":\"string[]\"}],\"name\":\"set\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GET = "get";

    public static final String FUNC_SET = "set";

    public static final Event SETEVENT_EVENT = new Event("SetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected TestKVMultiParameter(String contractAddress, Client client,
            CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<SetEventEventResponse> getSetEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETEVENT_EVENT, transactionReceipt);
        ArrayList<SetEventEventResponse> responses = new ArrayList<SetEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetEventEventResponse typedResponse = new SetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Tuple3<String, String, String> get(String name) throws ContractException {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue());
    }

    public TransactionReceipt set(List<String> entity) {
        final Function function = new Function(
                FUNC_SET, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void set(List<String> entity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SET, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSet(List<String> entity) {
        final Function function = new Function(
                FUNC_SET, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getSetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getSetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static TestKVMultiParameter load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new TestKVMultiParameter(contractAddress, client, credential);
    }

    public static TestKVMultiParameter deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(TestKVMultiParameter.class, client, credential, getBinary(client.getCryptoSuite()), null, null, null);
    }

    public static class SetEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
